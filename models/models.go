// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Coffee struct {
	ID          string        `json:"id"`
	Name        *string       `json:"name"`
	Image       *string       `json:"image"`
	Teaser      *string       `json:"teaser"`
	Description *string       `json:"description"`
	Price       *float64      `json:"price"`
	Ingredients []*Ingredient `json:"ingredients"`
}

type Ingredient struct {
	ID       string  `json:"id"`
	Name     *string `json:"name"`
	Quantity *int    `json:"quantity"`
}

type PaymentDetails struct {
	Name   string  `json:"name"`
	Type   string  `json:"type"`
	Number string  `json:"number"`
	Expiry string  `json:"expiry"`
	Cv2    int     `json:"cv2"`
	Amount float64 `json:"amount"`
}

type User struct {
	ID   string  `json:"id"`
	Name *string `json:"name"`
}

type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyEur Currency = "EUR"
	CurrencyGbp Currency = "GBP"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyEur,
	CurrencyGbp,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyEur, CurrencyGbp:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
